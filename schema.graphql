####
# Protocol
#### 

type Protocol @entity {
    "Configurator proxy address"
    id: Bytes!

    configuratorProxy: Bytes!
    configuratorImplementation: Bytes

    # Derived
    markets: [Market!] @derivedFrom(field: "protocol")
}

####
# MARKET
####

type Market @entity {
    ####
    # On creation only
    ####
    "Comet proxy address"
    id: Bytes!
    "Comet proxy address"
    cometProxy: Bytes
    "Protocol this market is part of"
    protocol: Protocol!
    "Block number the market was created"
    creationBlockNumber: BigInt!

    ####
    # On configuration update
    ####
    cometImplementation: Bytes

    lastConfigurationUpdateBlockNumber: BigInt!
    factory: Bytes!
    governor: Bytes!
    pauseGuardian: Bytes!
    extensionDelegate: Bytes!

    supplyKink: BigDecimal!
    supplyPerSecondInterestRateSlopeLow: BigInt!
    supplyPerSecondInterestRateSlopeHigh: BigInt!
    supplyPerSecondInterestRateBase: BigInt!

    borrowKink: BigDecimal!
    borrowPerSecondInterestRateSlopeLow: BigInt!
    borrowPerSecondInterestRateSlopeHigh: BigInt!
    borrowPerSecondInterestRateBase: BigInt!

    storeFrontPriceFactor: BigInt!
    trackingIndexScale: BigInt!

    baseTrackingSupplySpeed: BigInt!
	baseTrackingBorrowSpeed: BigInt!
	baseMinForRewards: BigInt!
	baseBorrowMin: BigInt!
	targetReserves: BigInt!

    baseAsset: BaseAsset! 

    ####
    # On accounting update
    ####
    lastAccountingUpdatedBlockNumber: BigInt!

    baseSupplyIndex: BigInt!
    baseBorrowIndex: BigInt!
    trackingSupplyIndex: BigInt!
    trackingBorrowIndex: BigInt!
    lastAccrualTime: BigInt!
    
    totalBasePrincipalSupply: BigInt!
    totalBasePrincipalBorrow: BigInt!

    "Total amount of base supplied to the market in present value"
    totalBaseSupply: BigInt!
    "Total amount of base borrowed from the market in present value"
    totalBaseBorrow: BigInt!
    "Percent usage of the market, that is totalBaseBorrow / totalBaseSupply"
    utilization: BigDecimal!
    supplyApr: BigDecimal!
    borrowApr: BigDecimal!

    # TODO: reserves - BuyCollateral, WithdrawReserves
    # base reserves
    # collateral reserves

    ####
    # Derived
    ####
    collateralAssets: [CollateralAsset!]! @derivedFrom(field: "market")
    collateralBalances: [MarketCollateralBalance!]! @derivedFrom(field: "market")
    positions: [Position!]! @derivedFrom(field: "market")
    supplyBaseMarketInteractions: [SupplyBaseMarketInteraction!]! @derivedFrom(field: "market")
    withdrawBaseMarketInteractions: [WithdrawBaseMarketInteraction!]! @derivedFrom(field: "market")
    absorbDebtMarketInteractions: [AbsorbDebtMarketInteraction!]! @derivedFrom(field: "market")
}

interface Asset {
    id: Bytes!

    address: Bytes!
    name: String!
    symbol: String!
    decimals: Int!

    market: Market!
    priceFeed: Bytes!
}

type BaseAsset implements Asset @entity { 
    "Comet proxy address + asset address"
    id: Bytes!

    address: Bytes!
    name: String!
    symbol: String!
    decimals: Int!

    market: Market!
    priceFeed: Bytes!
}

type CollateralAsset implements Asset @entity { 
    "Market ID + address"
    id: Bytes!

    creationBlockNumber: BigInt!
    address: Bytes!
    name: String!
    symbol: String!
    decimals: Int!

    market: Market!
    priceFeed: Bytes!

    "Percent of collateral that can be borrowed against"
    borrowCollateralFactor: BigDecimal!
    "Percent of collateral that can be borrowed before the account becomes liquidate-able"
    liquidateCollateralFactor: BigDecimal!
    "Percent penalty incurred by the account upon liquidation, 0.93 => 7% penalty"
    liquidationFactor: BigDecimal!
    "Max amount that can be supplied to protect the protocol against over exposure"
    supplyCap: BigInt!
}

interface CollateralBalance {
    ####
    # On creation
    ####
    id: Bytes!
    collateralAsset: CollateralAsset!
    creationBlockNumber: BigInt!

    ####
    # On update
    #### 
    lastUpdatedBlockNumber: BigInt!
    balance: BigInt!
}

type MarketCollateralBalance implements CollateralBalance @entity {
    ####
    # On creation
    ####
    "Market id + collateral address + 'bal'"
    id: Bytes!
    collateralAsset: CollateralAsset!
    creationBlockNumber: BigInt!

    "Market collateral is for"
    market: Market!

    ####
    # On update
    #### 
    lastUpdatedBlockNumber: BigInt!
    balance: BigInt!
}

####
# POSITIONS
####

type Position @entity {
    ####
    # On creation only
    ####
    "Market proxy address + owner address"
    id: Bytes!
    "Block number the position was created"
    creationBlockNumber: BigInt!
    "Market the position is in"
    market: Market!
    "Owner of the position"
    owner: Bytes!

    ####
    # On update
    ####
    lastUpdatedBlockNumber: BigInt!
    basePrincipal: BigInt!
    baseBalance: BigInt!
    baseTrackingIndex: BigInt!
    baseTrackingAccrued: BigInt!

    ####
    # Derived
    ####
    collateralBalances: [PositionCollateralBalance!]! @derivedFrom(field: "position")
    supplyBaseMarketInteractions: [SupplyBaseMarketInteraction!]! @derivedFrom(field: "position")
    withdrawBaseMarketInteractions: [WithdrawBaseMarketInteraction!]! @derivedFrom(field: "position")
    absorbDebtMarketInteractions: [AbsorbDebtMarketInteraction!]! @derivedFrom(field: "position")
}

type PositionCollateralBalance implements CollateralBalance @entity {
    ####
    # On creation
    ####
    "Position id + collateral address"
    id: Bytes!
    collateralAsset: CollateralAsset!
    creationBlockNumber: BigInt!

    "Position collateral is for"
    position: Position!

    ####
    # On update
    #### 
    lastUpdatedBlockNumber: BigInt!
    balance: BigInt!
}

####
# Interactions
####

interface ProtocolInteraction {
    id: Bytes!

    hash: Bytes!
    logIndex: BigInt!
    blockNumber: BigInt!
    timestamp: BigInt!

    from: Bytes!
    to: Bytes!
}

interface MarketInteraction implements ProtocolInteraction {
    id: Bytes!

    hash: Bytes!
    logIndex: BigInt!
    blockNumber: BigInt!
    timestamp: BigInt!

    "where value is being transferred from"
    from: Bytes!
    "where value is being transferred to"
    to: Bytes!

    market: Market!
}

type SupplyBaseMarketInteraction implements MarketInteraction @entity {
    "event hash + logIndex"
    id: Bytes!

    hash: Bytes!
    logIndex: BigInt!
    blockNumber: BigInt!
    timestamp: BigInt!

    "where value is being transferred from"
    from: Bytes!
    "where value is being transferred to"
    to: Bytes!

    market: Market!
    position: Position!

    asset: BaseAsset!
    amount: BigInt!
    amountUsd: BigDecimal!
}

type WithdrawBaseMarketInteraction implements MarketInteraction @entity {
    "event hash + logIndex"
    id: Bytes!

    hash: Bytes!
    logIndex: BigInt!
    blockNumber: BigInt!
    timestamp: BigInt!

    "where value is being transferred from"
    from: Bytes!
    "where value is being transferred to"
    to: Bytes!

    market: Market!
    position: Position!

    asset: BaseAsset!
    amount: BigInt!
    amountUsd: BigDecimal!
}

type AbsorbDebtMarketInteraction implements MarketInteraction @entity {
    "event hash + logIndex"
    id: Bytes!

    hash: Bytes!
    logIndex: BigInt!
    blockNumber: BigInt!
    timestamp: BigInt!

    "where value is being transferred from"
    from: Bytes!
    "where value is being transferred to"
    to: Bytes!

    market: Market!
    position: Position!

    asset: BaseAsset!
    amount: BigInt!
    amountUsd: BigDecimal!

    absorber: Bytes!
}

type SupplyCollateralMarketInteraction implements MarketInteraction @entity {
    "event hash + logIndex"
    id: Bytes!

    hash: Bytes!
    logIndex: BigInt!
    blockNumber: BigInt!
    timestamp: BigInt!

    "where value is being transferred from"
    from: Bytes!
    "where value is being transferred to"
    to: Bytes!

    market: Market!
    position: Position!

    asset: CollateralAsset!
    amount: BigInt!
    amountUsd: BigDecimal!
}

type WithdrawCollateralMarketInteraction implements MarketInteraction @entity {
    "event hash + logIndex"
    id: Bytes!

    hash: Bytes!
    logIndex: BigInt!
    blockNumber: BigInt!
    timestamp: BigInt!

    "where value is being transferred from"
    from: Bytes!
    "where value is being transferred to"
    to: Bytes!

    market: Market!
    position: Position!

    asset: CollateralAsset!
    amount: BigInt!
    amountUsd: BigDecimal!
}

type TransferCollateralMarketInteraction implements MarketInteraction @entity {
    "event hash + logIndex"
    id: Bytes!

    hash: Bytes!
    logIndex: BigInt!
    blockNumber: BigInt!
    timestamp: BigInt!

    "where value is being transferred from"
    from: Bytes!
    "where value is being transferred to"
    to: Bytes!

    market: Market!
    fromPosition: Position!
    toPosition: Position!

    asset: CollateralAsset!
    amount: BigInt!
    amountUsd: BigDecimal!
}

type AbsorbCollateralMarketInteraction implements MarketInteraction @entity {
    "event hash + logIndex"
    id: Bytes!

    hash: Bytes!
    logIndex: BigInt!
    blockNumber: BigInt!
    timestamp: BigInt!

    "where value is being transferred from"
    from: Bytes!
    "where value is being transferred to"
    to: Bytes!

    market: Market!
    position: Position!

    asset: CollateralAsset!
    amount: BigInt!
    amountUsd: BigDecimal!

    absorber: Bytes!
}
