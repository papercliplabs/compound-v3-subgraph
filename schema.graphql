####
# Protocol
#### 

type Protocol @entity {
    "Configurator proxy address"
    id: Bytes!

    configuratorProxy: Bytes!
    configuratorImplementation: Bytes

    markets: [Market!] @derivedFrom(field: "protocol")
}

####
# MARKET
####

type Market @entity {
    "Comet proxy address"
    id: Bytes!

    cometProxy: Bytes!
    protocol: Protocol!
    creationBlockNumber: BigInt!
    factory: Bytes!

    # Hard to get since need to read proxy memory slot, will populate on Upgrade event
    cometImplementation: Bytes

    # Configuration
    lastConfigurationUpdateBlockNumber: BigInt!
    governor: Bytes!
    pauseGuardian: Bytes!
    extensionDelegate: Bytes!

    supplyKink: BigDecimal!
    supplyPerSecondInterestRateSlopeLow: BigInt!
    supplyPerSecondInterestRateSlopeHigh: BigInt!
    supplyPerSecondInterestRateBase: BigInt!

    borrowKink: BigDecimal!
    borrowPerSecondInterestRateSlopeLow: BigInt!
    borrowPerSecondInterestRateSlopeHigh: BigInt!
    borrowPerSecondInterestRateBase: BigInt!

    storeFrontPriceFactor: BigInt!
    trackingIndexScale: BigInt!

    baseTrackingSupplySpeed: BigInt!
	baseTrackingBorrowSpeed: BigInt!
	baseMinForRewards: BigInt!
	baseBorrowMin: BigInt!
	targetReserves: BigInt!

    baseAsset: BaseAsset! 
    collateralAssets: [CollateralAsset!]! @derivedFrom(field: "market")

    # Indices
    baseSupplyIndex: BigInt!
    baseBorrowIndex: BigInt!
    trackingSupplyIndex: BigInt!
    trackingBorrowIndex: BigInt!
    lastAccrualTime: BigInt!
    
    # Accounting Inputs
    totalBasePrincipalSupply: BigInt!
    totalBasePrincipalBorrow: BigInt!

    lastAccountingUpdatedBlockNumber: BigInt!

    # Derived accounting
    "Total amount of base supplied to the market in present value"
    totalBaseSupply: BigInt!
    "Total amount of base borrowed from the market in present value"
    totalBaseBorrow: BigInt!
    "Percent usage of the market, that is totalBaseBorrow / totalBaseSupply"
    utilization: BigDecimal!
    supplyApr: BigDecimal!
    borrowApr: BigDecimal!

    # Positions
    positions: [Position!]! @derivedFrom(field: "market")

    # Interactions
    supplyBaseMarketInteractions: [SupplyBaseMarketInteraction!]! @derivedFrom(field: "market")
}

interface Asset {
    id: Bytes!

    address: Bytes!
    name: String!
    symbol: String!
    decimals: Int!

    market: Market!
    priceFeed: Bytes!
}

type BaseAsset implements Asset @entity { 
    "Comet proxy address + asset address"
    id: Bytes!

    address: Bytes!
    name: String!
    symbol: String!
    decimals: Int!

    market: Market!
    priceFeed: Bytes!
}

type CollateralAsset implements Asset @entity { 
    id: Bytes!

    address: Bytes!
    name: String!
    symbol: String!
    decimals: Int!

    market: Market!
    priceFeed: Bytes!

    "Percent of collateral that can be borrowed against"
    borrowCollateralFactor: BigDecimal!
    "Percent of collateral that can be borrowed before the account becomes liquidate-able"
    liquidateCollateralFactor: BigDecimal!
    "Percent penalty incurred by the account upon liquidation, 0.93 => 7% penalty"
    liquidationFactor: BigDecimal!
    "Max amount that can be supplied to protect the protocol against over exposure"
    supplyCap: BigInt!

    "Balance of the collateral asset"
    balance: BigInt!
}

####
# POSITIONS
####

type Position @entity {
    "market proxy address + owner address"
    id: Bytes!

    creationBlockNumber: BigInt!
    lastUpdatedBlockNumber: BigInt!

    "Market the position is in"
    market: Market!

    "Owner of the position"
    owner: Bytes!

    basePrincipal: BigInt!
    basePrincipalIsNegative: Boolean!

    # TODO: add collateral?

    # Interactions
    supplyBaseMarketInteractions: [SupplyBaseMarketInteraction!]! @derivedFrom(field: "position")
}

####
# Interactions
####

interface ProtocolInteraction {
    id: Bytes!

    hash: Bytes!
    logIndex: BigInt!
    blockNumber: BigInt!
    timestamp: BigInt!

    from: Bytes!
    to: Bytes!
}

interface MarketInteraction implements ProtocolInteraction {
    id: Bytes!

    hash: Bytes!
    logIndex: BigInt!
    blockNumber: BigInt!
    timestamp: BigInt!

    "where value is being transferred from"
    from: Bytes!
    "where value is being transferred to"
    to: Bytes!
    "who has ownership over this value"
    dst: Bytes!

    market: Market!
    position: Position!
}

type SupplyBaseMarketInteraction implements MarketInteraction @entity {
    "event hash + logIndex"
    id: Bytes!

    hash: Bytes!
    logIndex: BigInt!
    blockNumber: BigInt!
    timestamp: BigInt!

    "where value is being transferred from"
    from: Bytes!
    "where value is being transferred to"
    to: Bytes!
    "who owns this value"
    dst: Bytes!

    market: Market!
    position: Position!

    asset: BaseAsset!
    amount: BigInt!
    amountUsd: BigDecimal!

    supplyPrincipalIncrease: BigInt!
    borrowPrincipalDecrease: BigInt!
}
