####
# Protocol
####

type Protocol @entity {
    "Configurator proxy address"
    id: Bytes!

    configuratorProxy: Bytes!
    configuratorImplementation: Bytes

    markets: [Market!]!

    accounting: ProtocolAccounting!

    cumulativeUsage: Usage!

    # Derived
    hourlyUsage: [ProtocolHourlyUsage!]! @derivedFrom(field: "protocol")
    dailyUsage: [ProtocolDailyUsage!]! @derivedFrom(field: "protocol")

    hourlyProtocolAccounting: [HourlyProtocolAccounting!]! @derivedFrom(field: "protocol")
    dailyProtocolAccounting: [DailyProtocolAccounting!]! @derivedFrom(field: "protocol")
    weeklyProtocolAccounting: [WeeklyProtocolAccounting!]! @derivedFrom(field: "protocol")
}

type ProtocolAccounting @entity {
    "Name + time qualifier + log index (optional)"
    id: Bytes!

    lastUpdatedBlock: BigInt!

    totalSupplyUsd: BigDecimal!
    totalBorrowUsd: BigDecimal!
    reserveBalanceUsd: BigDecimal!
    collateralBalanceUsd: BigDecimal!
    collateralReservesBalanceUsd: BigDecimal!
    totalReserveBalanceUsd: BigDecimal!

    "Percent usage of the protocol, that is totalBorrowUsd / totalSupplyUsd"
    utilization: BigDecimal!

    # APR's
    avgSupplyApr: BigDecimal!
    avgBorrowApr: BigDecimal!
    avgRewardSupplyApr: BigDecimal!
    avgRewardBorrowApr: BigDecimal!

    avgNetSupplyApr: BigDecimal!
    avgNetBorrowApr: BigDecimal!

    collateralization: BigDecimal!
}

type HourlyProtocolAccounting @entity {
    id: Bytes!
    hour: BigInt!
    protocol: Protocol!
    accounting: ProtocolAccounting!
}

type DailyProtocolAccounting @entity {
    id: Bytes!
    day: BigInt!
    protocol: Protocol!
    accounting: ProtocolAccounting!
}

type WeeklyProtocolAccounting @entity {
    id: Bytes!
    week: BigInt!
    protocol: Protocol!
    accounting: ProtocolAccounting!
}

####
# Tokens
####

type Token @entity {
    "Address"
    id: Bytes!

    address: Bytes!
    name: String!
    symbol: String!
    decimals: Int

    # Price
    lastPriceUsd: BigDecimal!
    lastPriceBlockNumber: BigInt!
}

type BaseToken @entity {
    "market ID + token ID"
    id: Bytes!

    creationBlockNumber: BigInt!
    market: Market!
    token: Token!

    # Config
    lastConfigUpdateBlockNumber: BigInt!
    priceFeed: Bytes!

    # Price
    lastPriceUsd: BigDecimal!
    lastPriceBlockNumber: BigInt!
}

type CollateralToken @entity {
    "Market ID + token ID + 'Col'"
    id: Bytes!

    creationBlockNumber: BigInt!
    market: Market!
    token: Token!

    # Config
    lastConfigUpdateBlockNumber: BigInt!
    priceFeed: Bytes!
    "Percent of collateral that can be borrowed against"
    borrowCollateralFactor: BigDecimal!
    "Percent of collateral that can be borrowed before the account becomes liquidate-able"
    liquidateCollateralFactor: BigDecimal!
    "Percent penalty incurred by the account upon liquidation, 0.93 => 7% penalty"
    liquidationFactor: BigDecimal!
    "Max amount that can be supplied to protect the protocol against over exposure"
    supplyCap: BigInt!

    # Price
    lastPriceUsd: BigDecimal!
    lastPriceBlockNumber: BigInt!
}

####
# Collateral Token Balances
####

interface CollateralBalance {
    id: Bytes!
    creationBlockNumber: BigInt!
    collateralToken: CollateralToken!

    # Balance
    lastUpdateBlockNumber: BigInt!
    balance: BigInt!
}

type MarketCollateralBalance implements CollateralBalance @entity {
    "Market id + collateral address + 'BAL'"
    id: Bytes!
    creationBlockNumber: BigInt!
    collateralToken: CollateralToken!

    "Market collateral is for"
    market: Market!

    # Balances
    lastUpdateBlockNumber: BigInt!
    balance: BigInt!
    reserves: BigInt!

    # USD values
    balanceUsd: BigDecimal!
    reservesUsd: BigDecimal!
}

type PositionCollateralBalance implements CollateralBalance @entity {
    "Position id + collateral address"
    id: Bytes!
    creationBlockNumber: BigInt!
    collateralToken: CollateralToken!

    "Position collateral is for"
    position: Position!

    # Balance
    lastUpdateBlockNumber: BigInt!
    balance: BigInt!
}

####
# Market
####

type MarketConfiguration @entity {
    "Name + time qualifier"
    id: Bytes!
    market: Market!

    cometImplementation: Bytes

    lastConfigurationUpdateBlockNumber: BigInt!
    name: String!
    symbol: String!
    factory: Bytes!
    governor: Bytes!
    pauseGuardian: Bytes!
    extensionDelegate: Bytes!

    supplyKink: BigDecimal!
    supplyPerSecondInterestRateSlopeLow: BigInt!
    supplyPerSecondInterestRateSlopeHigh: BigInt!
    supplyPerSecondInterestRateBase: BigInt!

    borrowKink: BigDecimal!
    borrowPerSecondInterestRateSlopeLow: BigInt!
    borrowPerSecondInterestRateSlopeHigh: BigInt!
    borrowPerSecondInterestRateBase: BigInt!

    storeFrontPriceFactor: BigInt!
    trackingIndexScale: BigInt!

    baseTrackingSupplySpeed: BigInt!
    baseTrackingBorrowSpeed: BigInt!
    baseMinForRewards: BigInt!
    baseBorrowMin: BigInt!
    targetReserves: BigInt!

    baseToken: BaseToken!
    collateralTokens: [CollateralToken!]!
}

# Snapshot is taken whenever any configuration changes
type MarketConfigurationSnapshot @entity {
    "Timestamp of config change"
    id: Bytes!
    timestamp: BigInt!
    market: Market!
    configuration: MarketConfiguration!
}

type MarketAccounting @entity {
    "Name + time qualifier qualifier"
    id: Bytes!
    market: Market!

    lastAccountingUpdatedBlockNumber: BigInt!

    baseSupplyIndex: BigInt!
    baseBorrowIndex: BigInt!
    trackingSupplyIndex: BigInt!
    trackingBorrowIndex: BigInt!
    lastAccrualTime: BigInt!

    totalBasePrincipalSupply: BigInt!
    totalBasePrincipalBorrow: BigInt!

    baseReserveBalance: BigInt!

    "Total amount of base supplied to the market in present value"
    totalBaseSupply: BigInt!
    "Total amount of base borrowed from the market in present value"
    totalBaseBorrow: BigInt!
    "Percent usage of the market, that is totalBaseBorrow / totalBaseSupply"
    utilization: BigDecimal!
    supplyApr: BigDecimal!
    borrowApr: BigDecimal!

    # USD values
    totalBaseSupplyUsd: BigDecimal!
    totalBaseBorrowUsd: BigDecimal!
    baseReserveBalanceUsd: BigDecimal!
    collateralBalanceUsd: BigDecimal!
    collateralReservesBalanceUsd: BigDecimal!
    totalReserveBalanceUsd: BigDecimal!

    # APR's
    rewardSupplyApr: BigDecimal!
    rewardBorrowApr: BigDecimal!

    netSupplyApr: BigDecimal!
    netBorrowApr: BigDecimal!

    collateralization: BigDecimal!
}

type HourlyMarketAccounting @entity {
    "hour since unix epoche"
    id: Bytes!
    hour: BigInt!
    market: Market!
    accounting: MarketAccounting!
}

type DailyMarketAccounting @entity {
    "Day since unix epoche"
    id: Bytes!
    day: BigInt!
    market: Market!
    accounting: MarketAccounting!
}

type WeeklyMarketAccounting @entity {
    "Weeks since unix epoche"
    id: Bytes!
    week: BigInt!
    market: Market!
    accounting: MarketAccounting!
}

type Market @entity {
    ####
    # On creation only
    ####
    "Comet proxy address"
    id: Bytes!
    "Comet proxy address"
    cometProxy: Bytes!
    "Protocol this market is part of"
    protocol: Protocol!
    "Block number the market was created"
    creationBlockNumber: BigInt!

    ####
    # Configuration
    ####
    configuration: MarketConfiguration!

    ####
    # Accounting
    ####
    accounting: MarketAccounting!

    ####
    # Usage
    ####
    cumulativeUsage: Usage!

    ####
    # Derived
    ####
    collateralBalances: [MarketCollateralBalance!]! @derivedFrom(field: "market")
    positions: [Position!]! @derivedFrom(field: "market")

    supplyBaseInteractions: [SupplyBaseInteraction!]! @derivedFrom(field: "market")
    withdrawBaseInteractions: [WithdrawBaseInteraction!]! @derivedFrom(field: "market")
    absorbDebtInteractions: [AbsorbDebtInteraction!]! @derivedFrom(field: "market")
    supplyCollateralInteractions: [SupplyCollateralInteraction!]! @derivedFrom(field: "market")
    withdrawCollateralInteractions: [WithdrawCollateralInteraction!]! @derivedFrom(field: "market")
    transferCollateralInteractions: [TransferCollateralInteraction!]! @derivedFrom(field: "market")
    absorbCollateralInteractions: [AbsorbCollateralInteraction!]! @derivedFrom(field: "market")

    hourlyUsage: [MarketHourlyUsage!]! @derivedFrom(field: "market")
    dailyUsage: [MarketDailyUsage!]! @derivedFrom(field: "market")

    configurationSnapshots: [MarketConfigurationSnapshot!]! @derivedFrom(field: "market")

    hourlyMarketAccounting: [HourlyMarketAccounting!]! @derivedFrom(field: "market")
    dailyMarketAccounting: [DailyMarketAccounting!]! @derivedFrom(field: "market")
    weeklyMarketAccounting: [WeeklyMarketAccounting!]! @derivedFrom(field: "market")
}

####
# Account
####

type Account @entity {
    "Address"
    id: Bytes!

    creationBlockNumber: BigInt!
    address: Bytes!

    ####
    # Derived
    ####
    positions: [Position!]! @derivedFrom(field: "account")
    rewardsClaimed: [ClaimRewardsInteraction!]! @derivedFrom(field: "account")
}

####
# Position
####

type PositionAccounting @entity {
    "Market + Account + Name + time qualifier"
    id: Bytes!

    position: Position!

    lastUpdatedBlockNumber: BigInt!
    basePrincipal: BigInt!
    baseBalance: BigInt!
    baseTrackingIndex: BigInt!
    baseTrackingAccrued: BigInt!

    baseBalanceUsd: BigDecimal!
    collateralBalanceUsd: BigDecimal!
}

type PositionAccountingSnapshot @entity {
    "Timestamp + log index"
    id: Bytes!

    position: Position!
    timestamp: BigInt!
    accounting: PositionAccounting!
}

type Position @entity {
    ####
    # On creation only
    ####
    "Market proxy address + owner address"
    id: Bytes!
    "Block number the position was created"
    creationBlockNumber: BigInt!
    "Market the position is in"
    market: Market!
    "Owner of the position"
    account: Account!

    accounting: PositionAccounting!

    ####
    # Derived
    ####
    collateralBalances: [PositionCollateralBalance!]! @derivedFrom(field: "position")

    supplyBaseInteractions: [SupplyBaseInteraction!]! @derivedFrom(field: "position")
    withdrawBaseInteractions: [WithdrawBaseInteraction!]! @derivedFrom(field: "position")
    absorbDebtInteractions: [AbsorbDebtInteraction!]! @derivedFrom(field: "position")
    supplyCollateralInteractions: [SupplyCollateralInteraction!]! @derivedFrom(field: "position")
    withdrawCollateralInteractions: [WithdrawCollateralInteraction!]! @derivedFrom(field: "position")
    transferFromCollateralInteractions: [TransferCollateralInteraction!]! @derivedFrom(field: "fromPosition")
    transferToCollateralInteractions: [TransferCollateralInteraction!]! @derivedFrom(field: "toPosition")
    absorbCollateralInteractions: [AbsorbCollateralInteraction!]! @derivedFrom(field: "position")

    positionAccountingSnapshots: [PositionAccountingSnapshot!] @derivedFrom(field: "position")
}

####
# Usage
####

type Usage @entity {
    ""
    id: Bytes!

    protocol: Protocol!

    uniqueUsersCount: BigInt!
    transactionCount: BigInt!
    supplyBaseCount: BigInt!
    withdrawBaseCount: BigInt!
    liquidationCount: BigInt!
    supplyCollateralCount: BigInt!
    withdrawCollateralCount: BigInt!
    transferCollateralCount: BigInt!
}

type ProtocolHourlyUsage @entity {
    "Days since unix epoche"
    id: Bytes!
    protocol: Protocol!
    hour: BigInt!
    usage: Usage!
}

type ProtocolDailyUsage @entity {
    "usage ID + hour since unix epoche"
    id: Bytes!
    protocol: Protocol!
    day: BigInt!
    usage: Usage!
}

type MarketHourlyUsage @entity {
    "Days since unix epoche"
    id: Bytes!
    market: Market!
    hour: BigInt!
    usage: Usage!
}

type MarketDailyUsage @entity {
    "usage ID + hour since unix epoche"
    id: Bytes!
    market: Market!
    day: BigInt!
    usage: Usage!
}

# Helper to track active accounts
type _ActiveAccount @entity {
    "Address + use case + id"
    id: Bytes!
}

####
# Interactions
####

type Transaction @entity(immutable: true) {
    "Event hash + Log index"
    id: Bytes!

    hash: Bytes!
    logIndex: BigInt!
    blockNumber: BigInt!
    timestamp: BigInt!

    from: Bytes!
    to: Bytes

    gasLimit: BigInt!
    gasPrice: BigInt!
    gasUsed: BigInt
}

type SupplyBaseInteraction @entity(immutable: true) {
    "Event hash + logIndex"
    id: Bytes!

    transaction: Transaction!

    market: Market!
    position: Position!
    supplier: Bytes!

    asset: BaseToken!
    amount: BigInt!
    amountUsd: BigDecimal!
}

type WithdrawBaseInteraction @entity(immutable: true) {
    "event hash + logIndex"
    id: Bytes!

    transaction: Transaction!

    market: Market!
    position: Position!
    destination: Bytes!

    asset: BaseToken!
    amount: BigInt!
    amountUsd: BigDecimal!
}

type AbsorbDebtInteraction @entity(immutable: true) {
    "event hash + logIndex"
    id: Bytes!

    transaction: Transaction!

    market: Market!
    position: Position!
    absorber: Bytes!

    asset: BaseToken!
    amount: BigInt!
    amountUsd: BigDecimal!
}

type SupplyCollateralInteraction @entity(immutable: true) {
    "Event hash + logIndex"
    id: Bytes!

    transaction: Transaction!

    market: Market!
    position: Position!
    supplier: Bytes!

    asset: CollateralToken!
    amount: BigInt!
    amountUsd: BigDecimal!
}

type WithdrawCollateralInteraction @entity(immutable: true) {
    "Event hash + logIndex"
    id: Bytes!

    transaction: Transaction!

    market: Market!
    position: Position!
    destination: Bytes!

    asset: CollateralToken!
    amount: BigInt!
    amountUsd: BigDecimal!
}

type TransferCollateralInteraction @entity(immutable: true) {
    "event hash + logIndex"
    id: Bytes!

    transaction: Transaction!

    market: Market!
    fromPosition: Position!
    toPosition: Position!

    asset: CollateralToken!
    amount: BigInt!
    amountUsd: BigDecimal!
}

type AbsorbCollateralInteraction @entity(immutable: true) {
    "Event hash + logIndex"
    id: Bytes!

    transaction: Transaction!

    market: Market!
    position: Position!
    absorber: Bytes!

    asset: CollateralToken!
    amount: BigInt!
    amountUsd: BigDecimal!
}

type BuyCollateralInteraction @entity(immutable: true) {
    "event hash + logIndex"
    id: Bytes!

    transaction: Transaction!

    market: Market!
    buyer: Bytes!

    asset: CollateralToken!
    collateralAmount: BigInt!
    baseAmount: BigInt!
    collateralAmountUsd: BigDecimal!
    baseAmountUsd: BigDecimal!
}

type WithdrawReservesInteraction @entity(immutable: true) {
    "event hash + logIndex"
    id: Bytes!

    transaction: Transaction!

    market: Market!
    destination: Bytes!

    amount: BigInt!
    amountUsd: BigDecimal!
}

type ClaimRewardsInteraction @entity(immutable: true) {
    "event hash + logIndex"
    id: Bytes!

    transaction: Transaction!

    account: Account!
    destination: Bytes!

    token: Token!
    amount: BigInt!
    amountUsd: BigDecimal!
}
